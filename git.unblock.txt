Because the secret still lives in commit 269dacb8…, GitHub will keep blocking every push that includes that SHA—even if you’ve since deleted the file. If you truly don’t want to rewrite history, your only path is to tell GitHub “I acknowledge this secret and I want it allowed.” Here’s how:

Open the unblock URL that GitHub printed in your error:

bash
Copy
Edit
https://github.com/Webgenius0/tbriggs0213-backend/security/secret-scanning/unblock-secret/2wAAP8obUrZ6yj8GQ3bmtv242mU
(Paste it in your browser’s address bar.)

Allow or dismiss the finding
On that Security → Secret scanning page, you’ll see the “Google OAuth Access Token” finding. Click Allow once (or Dismiss, if you never want to see it again). That tells GitHub push protection to ignore this particular token.

Re-push your branch
Back in your terminal:

bash
Copy
Edit
git push -u origin shadhin
It should now accept the push, since you’ve explicitly whitelisted that secret.

If you can’t unblock (no admin rights)
Ask a repo-admin to visit that same unblock URL and allow the secret for you.

Or they can disable Push Protection for this branch entirely under Settings → Security & analysis → Push protection (not generally recommended).

Note: Allowing that token means GitHub will no longer block it on future pushes—so be sure you’re comfortable keeping it in your history. If you’d rather remove it altogether, you’ll need to rewrite your branch’s history (e.g. with an interactive rebase or git filter-repo) so that no commit ever contains that OAuth credential.
